<?xml version='1.0' encoding='utf-8'?>

<section xml:id="session28-p3">
    <title>Session 28: The category of pointed sets, Part 3</title>
    <p>
       Since I'm still kind of struggling with visualizing
       what's going on in <m>\mathbf{1} / \mathcal{S}</m>,
       I decided to start this week with a little Python 
       experiment.  The accompanying code for this 
       week's work can be found 
                       <url href="https://github.com/rruff82/LS-Categories/blob/main/assets/notebooks/ls-ses28-p3.ipynb">
                    here</url>.
    </p>
    <example>
        <title>Exercise 1: (Part 2/?)</title>
        <statement>
            <p>
                Both parts of the distributive laws...
            </p>
        </statement>
        <solution>
    <p>
        My basic idea this week was to see if I could 
        modify the <c>SmallCategory</c> class I created
        earlier to create a <c>SmallPointedCategory</c>
        by simply filtering out the maps that do not 
        preserve structure.
    </p>
    <p>
        If I'm being honest, the code feels kind of 
        <q>hacky</q>.  I added a list of maps 
        pointing to the distinguished point for
        each object, but then proceeded to not
        reference them at all.  I'm thinking that 
        these point maps would be important in the 
        cases where my sets included strings, but 
        the fact that my small category only used
        integers made the simple solution too good 
        to pass up.  I very clearly need to come 
        back to this and implement some kind of 
        function to compare maps (up to isomorphism).
    </p>
    <p>
        The big insight I discovered is that 
        there appears to be a one-to-one correspondence
        between the number of maps in my 
        <c>SmallPointedCategory</c> with <m>n</m> objects,
        and the number of <em>endomaps</em> on a
        collection of <m>n</m> points.    I 
        this lends support to the idea that 
        there's some kind of a connection between maps in 
        <m>\mathbf{1} / \mathcal{S}</m> and 
        maps in <m>\mathcal{S}^{\circlearrowright}</m>.
    </p>
    <p>
        I'm also starting to think that when I go to 
        index these objects <m>C_i</m> in <m>\mathbf{1} / \mathcal{S}</m>,
        I should assign <m>C_2 = T</m>
        to be my terminal object instead of <m>C_1 = T</m>. 
        My reason being is that if any terminal object maps
        to an initial object then all of them do, so any
        non-terminal object would have to be non-initial
        and vice versa.  For any initial object
        <m>S_i</m> and terminal object <m>T_j</m>,
        the uniqueness of terminal and initial objects
        implies that if <m>T_j \rightarrow S_i</m> exists
        then it should be an isomorphism.
    </p>
    <p>
        It seems entirely possible that <m>\mathbf{1} / \mathcal{S}</m>
        would have an infinite number of initial/terminal
        objects, but if I assign all of them 
        <q>even indexes</q> then I can interlace them together
        with the non-terminal/non-initial objects in an 
        alternating fashion.  Essentially,
        we have a unique set of maps defined by our sum
        <m>\mathbb{N} \rightarrow \mathbb{N}+\mathbb{N} 
\mathrel{\substack{\longrightarrow \\ \longrightarrow}}
        \mathbb{N}
        </m> and we can construct an unique isomorphism
        from there to <m>\mathbb{N} \times \mathbf{2}</m>.
    </p>
    <p>
        Perhaps that means the object <m>A</m> that I'm looking for 
        here looks something like this:
        <me>\boxed{
        \star \circlearrowleft ~~~ \bullet \leftrightarrows \bullet ~~   
        }
        </me>
        Or perhaps it's even a collection of <em>all possible cycles</em>
        like the following:
    </p>
    <image width="80%" xml:id="img-ses28-p3-A-inf">
        <shortdescription></shortdescription>
        <latex-image>
            \begin{tikzpicture}
                \draw (0,0) rectangle (10,2);
                \node (A) at (1,1) {$\star$};
                \node (B) at (2,1) {$\bullet$};
                \node (C) at (3,1) {$\bullet$};
                \node (D) at (4,1) {$\bullet$};
                \node (E) at (5,1) {$\bullet$};
                \node (F) at (6,1) {$\bullet$};
                \node (G) at (7,1) {$\bullet$};
                \node (I) at (8,1) {$...$};
                
                \path[-{stealth}]
            
                     (A) edge[->,>={Stealth},loop above] (A)
                     (B) edge[->,>={Stealth},loop above] (B)
                    (C) edge[bend right] (D)
                    (D) edge[bend right] (C)
                    (E) edge[bend right] (F)
                    (F) edge[bend right] (G)
                    (G) edge[bend right] (E)
            ;
            \end{tikzpicture}
        </latex-image>
    </image>
    <p>
        I still feel like this is a whole lot of conjecturing
        and not very rigorous.  I'm not sure if I should
        pursue this idea of better indexing the objects 
        of <m>\mathbf{1} / \mathcal{S}</m> to set  up
        an inductive argument or should be focusing on
        the connection between the categories 
        <m>\mathbf{1} / \mathcal{S}</m> and
         <m>\mathcal{S}^\circlearrowright</m> for a deductive one.
    </p>
        </solution>
    </example>



</section>